import eslint from "@eslint/js"
import prettier from "eslint-config-prettier"
import tseslint from "typescript-eslint"

export default tseslint.config(
  eslint.configs.recommended,
  ...tseslint.configs.recommendedTypeChecked,
  ...tseslint.configs.stylisticTypeChecked,
  {
    languageOptions: {
      parserOptions: {
        tsconfigRootDir: import.meta.dirname,
        project: ["./tsconfig.json", "./*/tsconfig.json"],
      },
    },
    linterOptions: {
      reportUnusedDisableDirectives: true,
    },
    rules: {
      "@typescript-eslint/consistent-indexed-object-style": [
        "error",
        "index-signature",
      ],
      "consistent-return": "off",
      "@typescript-eslint/consistent-return": "error",
      "@typescript-eslint/consistent-type-assertions": [
        "error",
        { assertionStyle: "as", objectLiteralTypeAssertions: "never" },
      ],
      "@typescript-eslint/consistent-type-definitions": "off",
      "@typescript-eslint/consistent-type-exports": [
        "error",
        { fixMixedExportsWithInlineTypeSpecifier: true },
      ],
      "@typescript-eslint/consistent-type-imports": [
        "error",
        {
          prefer: "type-imports",
          disallowTypeAnnotations: true,
          fixStyle: "inline-type-imports",
        },
      ],
      "@typescript-eslint/explicit-function-return-type": "error",
      "@typescript-eslint/explicit-member-accessibility": "error",
      "@typescript-eslint/explicit-module-boundary-types": "error",
      "default-param-last": "off",
      "@typescript-eslint/default-param-last": "error",
      "max-params": "off",
      "@typescript-eslint/max-params": [
        "error",
        {
          max: 4,
        },
      ],
      "@typescript-eslint/naming-convention": [
        "error",
        {
          selector: "default",
          format: ["camelCase"],
          leadingUnderscore: "allow",
          trailingUnderscore: "allow",
        },
        {
          selector: "import",
          format: ["camelCase", "PascalCase"],
        },
        {
          selector: "variable",
          format: ["camelCase", "UPPER_CASE"],
          leadingUnderscore: "allow",
          trailingUnderscore: "allow",
        },
        {
          selector: "typeLike",
          format: ["PascalCase"],
        },
      ],
      "@typescript-eslint/no-extraneous-class": "error",
      "@typescript-eslint/no-invalid-void-type": "error",
      "@typescript-eslint/no-meaningless-void-operator": "error",
      "@typescript-eslint/no-mixed-enums": "error",
      "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
      "@typescript-eslint/no-non-null-asserted-optional-chain": "error",

      // these rules are deliberately both set! either throw an error or
      // disable them with a comment directive, dont disable them here
      "@typescript-eslint/no-non-null-assertion": "error",
      "@typescript-eslint/non-nullable-type-assertion-style": "error",

      "no-redeclare": "off",
      "@typescript-eslint/no-redeclare": [
        "error",
        { ignoreDeclarationMerge: true },
      ],
      "@typescript-eslint/no-require-imports": "error",
      "@typescript-eslint/no-restricted-imports": [
        "error",
        {
          paths: [], // { name: string; message: string; allowTypeImports?: boolean}[]
        },
      ],
      "no-throw-literal": "off",
      "@typescript-eslint/only-throw-error": "error",
      "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
      "@typescript-eslint/no-unnecessary-condition": "off",
      "@typescript-eslint/no-unnecessary-qualifier": "error",
      "@typescript-eslint/no-unnecessary-type-assertion": "off",
      "@typescript-eslint/no-unnecessary-type-constraint": "off",
      "@typescript-eslint/no-unused-vars": [
        "error",
        {
          args: "all",
          argsIgnorePattern: "^_",
          caughtErrors: "all",
          caughtErrorsIgnorePattern: "^_",
          destructuredArrayIgnorePattern: "^_",
          varsIgnorePattern: "^_",
          ignoreRestSiblings: true,
        },
      ],
      "@typescript-eslint/no-useless-empty-export": "error",
      "@typescript-eslint/parameter-properties": "error",
      "prefer-promise-reject-errors": "off",
      "@typescript-eslint/prefer-promise-reject-errors": "error",
      "@typescript-eslint/prefer-readonly": "error",
      "@typescript-eslint/prefer-readonly-parameter-types": ["error"],
      "@typescript-eslint/prefer-return-this-type": "error",
      "@typescript-eslint/prefer-regexp-exec": "error",
      "@typescript-eslint/prefer-reduce-type-parameter": "error",
      "@typescript-eslint/prefer-ts-expect-error": "error",
      "@typescript-eslint/promise-function-async": "error",
      "@typescript-eslint/require-array-sort-compare": "error",
      "@typescript-eslint/restrict-plus-operands": "error",
      "@typescript-eslint/restrict-template-expressions": "error",
      "no-return-await": "off",
      "@typescript-eslint/return-await": "error",
      "@typescript-eslint/strict-boolean-expressions": "error",
      "@typescript-eslint/switch-exhaustiveness-check": "error",
      "arrow-body-style": ["error", "as-needed"],
      "constructor-super": "error",
      "capitalized-comments": "off",
      "consistent-this": ["error", "self"],
      "id-denylist": "off",
      "id-length": "off",
      "id-match": "off",
      "lines-between-class-members": [
        "error",
        "always",
        {
          exceptAfterSingleLine: true,
        },
      ],
      "max-depth": [
        "warn",
        {
          max: 6,
        },
      ],
      "max-lines": [
        "warn",
        {
          max: 2000,
          skipBlankLines: true,
          skipComments: true,
        },
      ],
      "max-lines-per-function": [
        "error",
        {
          max: 100,
          skipBlankLines: true,
          skipComments: true,
        },
      ],
      "max-nested-callbacks": [
        "error",
        {
          max: 3,
        },
      ],
      "max-statements": "off",
      "max-statements-per-line": [
        "error",
        {
          max: 4,
        },
      ],
      "multiline-comment-style": ["error", "separate-lines"],
      "multiline-ternary": "off",
      "new-cap": [
        "error",
        {
          newIsCap: true,
          capIsNew: true,
        },
      ],
      "no-await-in-loop": "off",
      "no-bitwise": "off",
      "no-class-assign": "error",
      "no-const-assign": "error",
      "no-continue": "off",
      "no-dupe-class-members": "error",
      "no-duplicate-imports": "error",
      "no-inline-comments": "off",
      "no-lonely-if": "error",
      "no-multi-assign": "error",
      "no-negated-condition": "off",
      "no-nested-ternary": "off",
      "no-new-object": "error",
      "no-new-symbol": "error",
      "no-plusplus": "off",
      "no-ternary": "off",
      "no-this-before-super": "error",
      "no-trailing-spaces": "error",
      "no-underscore-dangle": "off",
      "no-unneeded-ternary": "error",
      "no-useless-computed-key": "error",
      "no-useless-constructor": "error",
      "no-useless-rename": "error",
      "no-undefined": "off",
      "no-var": "error",
      "object-curly-newline": "off",
      "object-property-newline": "off",
      "object-shorthand": ["error", "always"],
      "one-var-declaration-per-line": "off",
      "one-var": ["error", "never"],
      "operator-assignment": ["error", "always"],
      "prefer-arrow-callback": "error",
      "prefer-const": "off",
      "prefer-destructuring": "off",
      "prefer-exponentiation-operator": "error",
      "prefer-numeric-literals": "error",
      "prefer-object-spread": "error",
      "prefer-rest-params": "error",
      "prefer-spread": "error",
      "prefer-template": "off",
      "require-yield": "error",
      "sort-imports": [
        "error",
        {
          ignoreCase: true,
          ignoreDeclarationSort: false,
          ignoreMemberSort: true,
          // memberSyntaxSortOrder: ["none", "all", "multiple", "single"],
          allowSeparatedGroups: true,
        },
      ],
      "sort-keys": "off",
      "sort-vars": "off",
      "symbol-description": "off",
      "space-before-blocks": "off",
      "spaced-comment": ["error", "always"],
      "unicode-bom": ["error", "never"],
      "wrap-regex": "off",
    },
  },
  {
    files: [
      "packages/infra/src/*.ts",
      "packages/core/src/*.ts",
      "packages/demo/src/*.ts",
    ],
    rules: {
      "@typescript-eslint/no-empty-interface": "off",
      "@typescript-eslint/no-explicit-any": "off",
      "@typescript-eslint/no-this-alias": "off",
      "@typescript-eslint/no-unsafe-argument": "off",
      "@typescript-eslint/no-unsafe-assignment": "off",
      "@typescript-eslint/no-unsafe-call": "off",
      "@typescript-eslint/no-unsafe-member-access": "off",
      "@typescript-eslint/no-unsafe-return": "off",
    },
  },
  {
    files: ["*.js"],
    ...tseslint.configs.disableTypeChecked,
  },
  prettier,
)
